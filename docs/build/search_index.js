var documenterSearchIndex = {"docs":
[{"location":"#This-is-the-documentation-file-of-VecG_TNR","page":"This is the documentation file of VecG_TNR","title":"This is the documentation file of VecG_TNR","text":"","category":"section"},{"location":"","page":"This is the documentation file of VecG_TNR","title":"This is the documentation file of VecG_TNR","text":"The following is the function and documentations","category":"page"},{"location":"","page":"This is the documentation file of VecG_TNR","title":"This is the documentation file of VecG_TNR","text":"Modules = [Main.VecG_TNR]\nOrder   = [:function, :type]","category":"page"},{"location":"#Base.:*-Tuple{Main.VecG_TNR.GroupElement, Main.VecG_TNR.GroupElement}","page":"This is the documentation file of VecG_TNR","title":"Base.:*","text":"Overload the multiplication * to group multiplication.\n\nExample\n\n\njulia> GroupElement(2, CyclicGroup(3)) * GroupElement(1, CyclicGroup(3))\nGroupElement{CyclicGroup}(0, CyclicGroup(3))\n\n\n\n\n\n","category":"method"},{"location":"#Base.:+-Union{Tuple{G}, Tuple{T}, Tuple{Main.VecG_TNR.Mor{G, T}, Main.VecG_TNR.Mor{G, T}}} where {T, G<:Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Base.:+","text":"Elementwise addition of two morphisms.\n\nInput:\n\ntwo morphisms\n\nOutput:\n\nthe sum of the two morphisms\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T1 = random_mor(Float64, (A, B, C, D))\n       T2 = random_mor(Float64, (A, B, C, D))\n       T1 + T2\n\n\n\n\n\n","category":"method"},{"location":"#Base.:--Union{Tuple{G}, Tuple{T}, Tuple{Main.VecG_TNR.Mor{G, T}, Main.VecG_TNR.Mor{G, T}}} where {T, G<:Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Base.:-","text":"Elementwise subtraction of two morphisms.\n\nInput:\n\ntwo morphisms\n\nOutput:\n\nthe difference of the two morphisms\n\nExample\n\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T1 = random_mor(Float64, (A, B, C, D))\n       T2 = random_mor(Float64, (A, B, C, D))\n       T1 - T2\n\n\n\n\n\n","category":"method"},{"location":"#Base.:==-Tuple{Main.VecG_TNR.GroupElement{Main.VecG_TNR.CyclicGroup}, Main.VecG_TNR.GroupElement{Main.VecG_TNR.CyclicGroup}}","page":"This is the documentation file of VecG_TNR","title":"Base.:==","text":"Overload the == to group case.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:==-Union{Tuple{G}, Tuple{Main.VecG_TNR.Obj{G}, Main.VecG_TNR.Obj{G}}} where G<:Main.VecG_TNR.Group","page":"This is the documentation file of VecG_TNR","title":"Base.:==","text":"Comparing two objects.\n\n\n\n\n\n","category":"method"},{"location":"#Base.Broadcast.broadcasted-Union{Tuple{G}, Tuple{T}, Tuple{typeof(/), Main.VecG_TNR.Mor{G, T}, Number}} where {T, G<:Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Base.Broadcast.broadcasted","text":"Elementwise division of a morphism by a number.\n\nInput:\n\na morphism\na number\n\nOutput:\n\na new morphism created by performing division\n\n\n\n\n\n","category":"method"},{"location":"#Base.Broadcast.broadcasted-Union{Tuple{G}, Tuple{T}, Tuple{typeof(sqrt), Main.VecG_TNR.Mor{G, T}}} where {T, G<:Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Base.Broadcast.broadcasted","text":"Take the elementwise square root of a morphism.\n\nInput:\n\na morphism\n\nOutput:\n\na new morphism created by taking the elementwise square root\n\nExample\n\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = random_mor(Float64, (A, B, C, D))\n       sqrt(T)\n\n\n\n\n\n","category":"method"},{"location":"#Base.eltype-Tuple{Type{<:Main.VecG_TNR.CyclicGroup}}","page":"This is the documentation file of VecG_TNR","title":"Base.eltype","text":"Get the element type of the group.\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Tuple{Main.VecG_TNR.Mor, Int64}","page":"This is the documentation file of VecG_TNR","title":"Base.getindex","text":"Get the object of the i-th leg\n\nInput:\n\na morphism\nthe index\n\nOutput:\n\nthe object of the i-th leg\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = Mor(Float64, (A, B, C, D))\n       T[1]\n       e ⊕ 2a ⊕ 3a²\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Tuple{Main.VecG_TNR.Mor, UnitRange{Int64}}","page":"This is the documentation file of VecG_TNR","title":"Base.getindex","text":"Get a vector of objects in a morphism\n\nInput:\n\na morphism\na range\n\nOutput:\n\na vector of objects in the morphism\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = Mor(Float64, (A, B, C, D))\n       T[1:2]\n       (e ⊕ 2a ⊕ 3a², e ⊕ 3a ⊕ 2a²)\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Tuple{Main.VecG_TNR.Mor, Vararg{Main.VecG_TNR.GroupElement}}","page":"This is the documentation file of VecG_TNR","title":"Base.getindex","text":"Get the tensor of the sector\n\nInput:\n\na morphism\na sector\n\nOutput:\n\nthe tensor of the sector\n\nBoth the form T[S] and T[S.sect], which can be, for example T[g,h,k,l], are supported.\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = Mor(Float64, (A, B, C, D))\n       S = Sector(e, a, aa)\n       T[S]\n       T[e,a,aa]\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Tuple{Main.VecG_TNR.Sector, Int64}","page":"This is the documentation file of VecG_TNR","title":"Base.getindex","text":"Get the key-th group element in a sector\n\nInput:\n\na sector\nthe index\n\nOutput:\n\nthe key-th group element in the sector\n\nExample\n\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       S = Sector(e, a, aa)\n       S[2]\n       a\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Union{Tuple{G}, Tuple{Main.VecG_TNR.Obj{G}, Main.VecG_TNR.GroupElement{G}}} where G<:Main.VecG_TNR.Group","page":"This is the documentation file of VecG_TNR","title":"Base.getindex","text":"Get the multiplicity of a group element in an object\n\nInput:\n\nan object\na group element\n\nOutput:\n\nthe multiplicity of the group element in the object\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       A[a]\n       2\n\n\n\n\n\n","category":"method"},{"location":"#Base.lastindex-Tuple{Main.VecG_TNR.Mor}","page":"This is the documentation file of VecG_TNR","title":"Base.lastindex","text":"Get the number of legs in a morphism\n\nInput:\n\na morphism\n\nOutput:\n\nthe number of legs in the morphism\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = Mor(Float64, (A, B, C, D))\n        lastindex(T)\n       4\n\n\n\n\n\n","category":"method"},{"location":"#Base.setindex!-Union{Tuple{G}, Tuple{Main.VecG_TNR.Obj{G}, Int64, Main.VecG_TNR.GroupElement{G}}} where G<:Main.VecG_TNR.Group","page":"This is the documentation file of VecG_TNR","title":"Base.setindex!","text":"Set the multiplicity of a group element in an object\n\nInput:\n\nan object\nthe multiplicity\na group element\n\nOutput:\n\nthe object with the multiplicity of the group element set\n\nExample\n\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       A[a] = 5\n       e⊕5a⊕3a²\n\n\n\n\n\n","category":"method"},{"location":"#Base.setindex!-Union{Tuple{G}, Tuple{T}, Tuple{Main.VecG_TNR.Mor{G, T}, Array{T}, Vararg{Main.VecG_TNR.GroupElement{G}}}} where {T, G<:Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Base.setindex!","text":"Set the morphism to a given array for a given sector\n\nInput:\n\na morphism\nan array\na tuple of group elements or a sector\n\nOutput:\n\nthe morphism with the tensor set to the array for the sector constructed by the tuple of group elements\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = random_mor(Float64, (A, B, C, D))\n       T[e,a,aa,e] = rand(1,3,3,2)\njulia> S = Sector(e, a, aa, e)\n       T[S] = rand(1,3,3,2)\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.VecG_dag-Union{Tuple{Main.VecG_TNR.Mor{G, T}}, Tuple{G}, Tuple{T}} where {T, G<:Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.VecG_dag","text":"Take the dagger of a morphism. The dagger of a morphism is defined by taking the conjugate transpose of the tensor of each sector. The new legs are in the reverse order of the original legs. Moreover, the objects of the new morphism are the dual objects of the original morphism. For example:\n\nThe 1st leg becomes the last leg\nThe 2nd leg becomes the 2nd last leg\nThe 3rd leg becomes the 3rd last leg\n...\n\nHere is an picture to illustrate the idea:\n\n| | | | |\n1 2 3 4 5\n| | | | |\n^ ^ ^ ^ ^\n| | | | |\n    T\n\nAfter taking the dagger, the morphism becomes:\n\n| | | | |\n5 4 3 2 1\n| | | | |\nv v v v v\n| | | | |\n    T^†\n\nInput:\n\na morphism\n\nOutput:\n\na new morphism created by taking the dagger\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = random_mor(Float64, (A, B, C, D))\n       dagger(T)\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.VecG_permutedims-Union{Tuple{G}, Tuple{T}, Tuple{Main.VecG_TNR.Mor{G, T}, Tuple{Vararg{Int64}}}} where {T, G<:Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.VecG_permutedims","text":"Permute the dimensions of a morphism.\n\nInput:\n\na morphism\na tuple of integers, which is a permutation\n\nOutput:\n\na morphism, whose dimensions are permuted\n\nExample\n\njulia> D6 = DihedralGroup(3)\n    e = identity_element(D6)\n    s = GroupElement((1,0), D6)\n    r = GroupElement((0,1), D6)\n    A = Obj(e=>2, s=>3, r=>2, s*r=>1)\n    B = Obj(e=>2, s=>3, r=>2, s*r=>1)\n    C = Obj(e=>2, s=>3, r=>2, s*r=>1)\n    D = Obj(e=>2, s=>3, r=>2, s*r=>1)\n    T = random_mor(Float64, (A, B, C, D))\n    Tperm = VecG_permutedims(T, (2,3,4,1)) \n    Tperm[e,s,r,s*r] == permutedims(T[s*r, e, s, r],(2,3,4,1))\n    true\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.VecG_permutesectors-Tuple{Main.VecG_TNR.Sector, Tuple{Vararg{Int64}}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.VecG_permutesectors","text":"Permute the sectors of a morphism.\n\nInput:\n\na morphism\na tuple of integers, which is a permutation\n\nOutput:\n\na morphism, whose sectors are permuted\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       S = Sector(e, a, aa)\n       VecG_permutesectors(S, (2,3,1))\n        a ⊗ a² ⊗ e\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.block_matrix_svd-Tuple{AbstractMatrix{<:AbstractMatrix}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.block_matrix_svd","text":"Perform SVD on a block matrix, where each block is a submatrix.     The input is a 2D array of matrices, and the output is a tuple of block matrices U, S, and V.     The block matrices U and V are the left and right singular vectors, respectively.     The block matrix S is the singular values, stored as a vector.\n\nArguments\n\nmatrices::AbstractMatrix{<:AbstractMatrix}: A 2D array of matrices to be factorized.\n\nReturns\n\nU_blocks::Vector{AbstractMatrix}: A vector of block matrices representing the left singular vectors.\nS::Vector: A vector of singular values.\nV_blocks::Vector{AbstractMatrix}: A vector of block matrices representing the right singular vectors.\n\nExample\n\nA = [1 2; 3 4]  # 2x3 matrix\nB = [5 6 6; 7 8 8]  # 2x3 matrix\nC = [9 10; 11 12; 15 16; 17 18]  # 4x2 matrix\nD = [13 14 19; 15 16 20; 21 22 23; 25 26 27]  # 4x3 matrix\nmatrices = Array{Matrix{Float64}}(undef, 2, 2)\nmatrices[1, 1] = A\nmatrices[1, 2] = B\nmatrices[2, 1] = C\nmatrices[2, 2] = D\nU_blocks, S, V_blocks = block_matrix_svd(matrices)\n\nThe output Ublocks, S, and Vblocks can be compared with the output of the svd function. Here we can use the concatenatematriceswithmetadata function to concatenate the block matrices into a single large matrix and compare the results. However, before doing so, we need to reshape the block matrices into a 2x1 array to match the input format of the concatenatematriceswithmetadata function. The comparison should return true for both U and V.\n\nUcat, _ = concatenate_matrices_with_metadata(AbstractMatrix{AbstractMatrix}(reshape(U_blocks,2,1)))\nVcat, _ = concatenate_matrices_with_metadata(AbstractMatrix{AbstractMatrix}(reshape(V_blocks,2,1)))\nU, s, V = svd([A B; C D])\n@show Ucat ≈ U\n@show Vcat ≈ V\ntrue\ntrue\n\nThus we would like to expect that the Ublocks * S * Vblocks' is approximately equal to the original matrix. The Hermitian conjugate need to be taken into account when dealing with complex matrices.  This choice of the convension if different from the ITensor package, where the Hermitian conjugate is taken into account in the SVD function. In VecG tensor svd, we will include the Hermitian conjugate in the SVD function, such that the contraction of U * S * V will directly give the original matrix.\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.concatenate_matrices_with_metadata-Tuple{AbstractMatrix{<:AbstractMatrix}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.concatenate_matrices_with_metadata","text":"Concatenate a 2D array of matrices into a single large matrix, and record metadata for the submatrices.     The metadata is stored in a dictionary with keys (i, j), which represents the location of the block.     And values (startrow, startcol, numrows, numcols) represent the starting row and column of the block, and the number of rows and columns of the block.     The metadata can be used to extract the submatrices from the large matrix.\n\nArguments\n\nmatrices::AbstractMatrix{<:AbstractMatrix}: A 2D array of matrices to be concatenated.\n\nReturns\n\nbig_matrix::Matrix: The large matrix obtained by concatenating the input matrices.\nmetadata::Dict{Tuple{Int, Int}, Tuple{Int, Int, Int, Int}}: The metadata for the submatrices.\n\nExample\n\nM = Matrix{Matrix}(undef, 2, 2)\nA = [1 2; 3 4]  # 2x2 matrix\nB = [5 6 6; 7 8 8]  # 2x3 matrix\nC = [9 10; 11 12; 15 16; 17 18]  # 3x2 matrix\nD = [13 14 19; 15 16 20; 21 22 23]  # 3x3 matrix\nM[1,1] = A\nM[1,2] = B\nM[2,1] = C\nM[2,2] = D\nbig_matrix, metadata = concatenate_matrices_with_metadata(M)\n@show big_matrix\n6×5 Matrix{Int64}:\n  1   2   5   6   6\n  3   4   7   8   8\n  9  10  13  14  19\n 11  12  15  16  20\n 15  16  21  22  23\n 17  18   0   0   0\n @show metadata\n Dict{Tuple{Int64, Int64}, NTuple{4, Int64}} with 4 entries:\n  (1, 2) => (1, 3, 2, 3)\n  (1, 1) => (1, 1, 2, 2)\n  (2, 2) => (3, 3, 3, 3)\n  (2, 1) => (3, 1, 4, 2)\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.dual_obj-Union{Tuple{Main.VecG_TNR.Obj{G}}, Tuple{G}} where G<:Main.VecG_TNR.Group","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.dual_obj","text":"Generating a dual object.\n\nInput:\n\nan object\n\nOutput:\n\nthe dual object, whose multiplicities are the same as the input object, but the group elements are inversed.\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       dual_obj(A)\n\ne⊕3a⊕2a²\n\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.elements-Tuple{Main.VecG_TNR.CyclicGroup}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.elements","text":"Generating the tuple of elements of group. Support CyclicGroup, DihedralGroup and ProductGroup. However, for integer group, the elements are infinite, so we do not provide this function.\n\nExample\n\njulia> elements(CyclicGroup(3))\n(GroupElement{CyclicGroup}(0,CyclicGroup(3)), GroupElement{CyclicGroup}(1,CyclicGroup(3)), GroupElement{CyclicGroup}(2,CyclicGroup(3)))\n\njulia> elements(DihedralGroup(3))\n(GroupElement{DihedralGroup}((0,0), DihedralGroup(3)), GroupElement{DihedralGroup}((0,1), DihedralGroup(3)), GroupElement{DihedralGroup}((0,2), DihedralGroup(3)), GroupElement{DihedralGroup}((1,0), DihedralGroup(3)), GroupElement{DihedralGroup}((1,1), DihedralGroup(3)), GroupElement{DihedralGroup}((1,2), DihedralGroup(3)))\n\njulia> elements(ProductGroup(CyclicGroup(2), CyclicGroup(2)))\n((GroupElement{CyclicGroup}(0, CyclicGroup(2)), GroupElement{CyclicGroup}(1, CyclicGroup(2))), (GroupElement{CyclicGroup}(0, CyclicGroup(2)), GroupElement{CyclicGroup}(1, CyclicGroup(2))))\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.extract_blocks_to_matrix-Union{Tuple{G}, Tuple{T}, Tuple{Main.VecG_TNR.Mor{G, T}, Int64, Any}} where {T, G<:Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.extract_blocks_to_matrix","text":"Extracts VecG morphism to block matrices when given a fixed group element g_bridge. This is an intermediate function before performing svd.\n\nInput\n\nA morphism\nA integer, before and include which legs will be considered as row indices, and after which legs will be considered as column indices\nA dictionary that representing the splitting of the sector, produced from tosectoroutin\n\nOutput:\n\nA dictionary, whose keys are bridge sectors appeared in the morphism, and values are matrix of matrices\n\nExample\n\njulia> D6 = DihedralGroup(3)\n        e = identity_element(D6)\n        s = GroupElement((1,0), D6)\n        r = GroupElement((0,1), D6)\n        A = Obj(e=>2, s=>3, r=>2, s*r=>1) \n        B = Obj(e=>2, s*r*r=>2, r=>3, s*r=>2)\n        C = Obj(e=>2, s=>3, r*r=>2, s*r=>2)\n        D = Obj(e=>2, s=>4, r=>1, s*r*r=>1)\n        TT = random_mor(Float64, (A, B, C, D))\n        sec_split = to_sector_outin(TT, 2)\n        Mat = extract_blocks_to_matrix(TT, 2, sec_split)\n        @show Mat[s][1,1] == reshape(TT[s,e,r*r,s*r*r], 6,2) # true\n        @show Mat[s][1,2] == reshape(TT[s,e,s,e], 6,6) # true\n        @show Mat[s][2,2] == reshape(TT[r,s*r,s,e], 4,6) # true\n\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.get_group-Tuple{Main.VecG_TNR.Mor}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.get_group","text":"Get the group of a morphism\n\nInput:\n\na morphism\n\nOutput:\n\nthe group of the morphism\n\nExample\n\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = Mor(Float64, (A, B, C, D))\n       get_group(T)\n       ℤ₃\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.get_group-Tuple{Main.VecG_TNR.Obj}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.get_group","text":"Get the group that the object belongs to\n\nInput:\n\nan object\n\nOutput:\n\nthe group that the object belongs to\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       get_group(A)\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.get_sector_size-Union{Tuple{G}, Tuple{T}, Tuple{Main.VecG_TNR.Mor{G, T}, Tuple{Vararg{Main.VecG_TNR.GroupElement{G}}}}} where {T, G<:Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.get_sector_size","text":"Get the size of the tensor for a given sector\n\nInput:\n\na morphism\na tuple of group elements or a sector\n\nOutput:\n\nthe size of the tensor for the sector constructed by the tuple of group elements\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = random_mor(Float64, (A, B, C, D))\n       get_sector_size(T, (e, a, aa, e))\n       (1, 3, 3, 2)\n\njulia> S = Sector(e, a, aa, e)\n    get_sector_size(T, S)\n    (1, 3, 3, 2)\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.group_iter-Tuple{Main.VecG_TNR.Group, Int64}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.group_iter","text":"Generating a iterator, whose terms are n-tuple of group elements. It supports CyclicGroup, DihedralGroup and ProductGroup. However, since the elements of IntegerGroup are infinite, we do not provide this function.\n\nExample\n\njulia>  for i in group_iter(CyclicGroup(2), 2)\n            println(i)\n        end\n(GroupElement{CyclicGroup}(0, CyclicGroup(2)), GroupElement{CyclicGroup}(0, CyclicGroup(2)))\n(GroupElement{CyclicGroup}(1, CyclicGroup(2)), GroupElement{CyclicGroup}(0, CyclicGroup(2)))\n(GroupElement{CyclicGroup}(0, CyclicGroup(2)), GroupElement{CyclicGroup}(1, CyclicGroup(2)))\n(GroupElement{CyclicGroup}(1, CyclicGroup(2)), GroupElement{CyclicGroup}(1, CyclicGroup(2)))\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.group_multiply-Tuple{Main.VecG_TNR.GroupElement{Main.VecG_TNR.CyclicGroup}, Main.VecG_TNR.GroupElement{Main.VecG_TNR.CyclicGroup}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.group_multiply","text":"group_multiply(x::GroupElement{CyclicGroup}, y::GroupElement{CyclicGroup})\n\nMultiplying two group elements of cyclic group.\n\nExample\n\njulia> group_multiply(GroupElement(2, CyclicGroup(3)), GroupElement(1, CyclicGroup(3)))\nGroupElement{CyclicGroup}(0, CyclicGroup(3))\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.group_multiply-Tuple{Main.VecG_TNR.GroupElement{Main.VecG_TNR.DihedralGroup}, Main.VecG_TNR.GroupElement{Main.VecG_TNR.DihedralGroup}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.group_multiply","text":"group_multiply(x::GroupElement{DihedralGroup}, y::GroupElement{DihedralGroup})\n\nMultiplying two group elements of dihedral group.\n\nExample\n\njulia> group_multiply(GroupElement((0,1), DihedralGroup(3)), GroupElement((1,0), DihedralGroup(3)))\nGroupElement{DihedralGroup}((1,2), DihedralGroup(3))\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.group_multiply-Tuple{Main.VecG_TNR.GroupElement{Main.VecG_TNR.IntegerGroup}, Main.VecG_TNR.GroupElement{Main.VecG_TNR.IntegerGroup}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.group_multiply","text":"group_multiply(x::GroupElement{IntegerGroup}, y::GroupElement{IntegerGroup})\n\nMultiplying two group elements of integer group.\n\nExample\n\njulia> group_multiply(GroupElement(2, IntegerGroup()), GroupElement(3, IntegerGroup()))\nGroupElement{IntegerGroup}(5, IntegerGroup())\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.group_multiply-Tuple{Main.VecG_TNR.GroupElement{Main.VecG_TNR.ProductGroup}, Main.VecG_TNR.GroupElement{Main.VecG_TNR.ProductGroup}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.group_multiply","text":"group_multiply(x::GroupElement{ProductGroup}, y::GroupElement{ProductGroup})\n\nMultiplying two group elements of product group.\n\nExample\n\njulia> group_multiply(GroupElement((GroupElement(1, CyclicGroup(3)), GroupElement((0,1), DihedralGroup(3))), ProductGroup(CyclicGroup(3), DihedralGroup(3))), GroupElement((GroupElement(2, CyclicGroup(3)), GroupElement((1,2), DihedralGroup(3))), ProductGroup(CyclicGroup(3), DihedralGroup(3)))\nGroupElement{ProductGroup}((GroupElement{CyclicGroup}(0, CyclicGroup(3)), GroupElement{DihedralGroup}((1,0), DihedralGroup(3))), ProductGroup((CyclicGroup(3), DihedralGroup(3)))\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.group_tree-Tuple{Main.VecG_TNR.GroupElement, Int64}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.group_tree","text":"Generating an iterator of n-tuple of group elements, such that all elements are multiplied to g. It supports CyclicGroup, DihedralGroup and ProductGroup. However, since the elements of IntegerGroup are infinite, we do not provide this function.\n\nInput Parameter:\n\ng: a group element\nn: the number of group elements in a tuple\n\nExample\n\njulia> x = group_tree(GroupElement(0, CyclicGroup(2)), 2)\n\nBase.Generator{Base.Iterators.ProductIterator{Tuple{Tuple{GroupElement{CyclicGroup}, GroupElement{CyclicGroup}}}}, var\"#18#20\"{GroupElement{CyclicGroup}}}(var\"#18#20\"{GroupElement{CyclicGroup}}(GroupElement{CyclicGroup}(0, CyclicGroup(2))), Base.Iterators.ProductIterator{Tuple{Tuple{GroupElement{CyclicGroup}, GroupElement{CyclicGroup}}}}(((GroupElement{CyclicGroup}(0, CyclicGroup(2)), GroupElement{CyclicGroup}(1, CyclicGroup(2))),)))\n\njulia> for i in x\n            println(i)\n       end\n\n(GroupElement{CyclicGroup}(0, CyclicGroup(2)), GroupElement{CyclicGroup}(0, CyclicGroup(2)))\n(GroupElement{CyclicGroup}(1, CyclicGroup(2)), GroupElement{CyclicGroup}(1, CyclicGroup(2)))\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.identity_element-Tuple{Main.VecG_TNR.CyclicGroup}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.identity_element","text":"Give the identity element of the group\n\nExample\n\njulia> identity_element(CyclicGroup(3))\nGroupElement{CyclicGroup}(0, CyclicGroup(3))\n\njulia> identity_element(DihedralGroup(3))\nGroupElement{DihedralGroup}((0,0),DihedralGroup(3))\n\njulia> identity_element(ProductGroup(CyclicGroup(3), DihedralGroup(3)))\nGroupElement{ProductGroup}((GroupElement{CyclicGroup}(0, CyclicGroup(3)), GroupElement{DihedralGroup}((0,0), DihedralGroup(3))), ProductGroup((CyclicGroup(3), DihedralGroup(3)))\n\njulia> identity_element(IntegerGroup())\nGroupElement{IntegerGroup}(0, IntegerGroup())\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.identity_mor-Tuple{Type, Main.VecG_TNR.Obj}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.identity_mor","text":"Generating an identity morphism for a given object.\n\nInput:\n\nelement type: data type, for example Float64, ComplexF64, etc...\nobject: an object\n\nOutput:\n\nan identity morphism, whose data are identity matrices\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       identity_mor(Float64, A)\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.inverse-Tuple{Main.VecG_TNR.GroupElement{Main.VecG_TNR.CyclicGroup}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.inverse","text":"Give the inverse of the element x\n\nExample\n\njulia> inverse(GroupElement(1, CyclicGroup(3)))\nGroupElement{CyclicGroup}(2, CyclicGroup(3))\n\njulia> inverse(GroupElement((0,2), DihedralGroup(3)))\nGroupElement{DihedralGroup}((0,1), DihedralGroup(3))\n\njulia> inverse(GroupElement((GroupElement(1, CyclicGroup(3)), GroupElement((0,2), DihedralGroup(3))), ProductGroup(CyclicGroup(3), DihedralGroup(3)))\nGroupElement{ProductGroup}((GroupElement{CyclicGroup}(2, CyclicGroup(3)), GroupElement{DihedralGroup}((0,1), DihedralGroup(3))), ProductGroup((CyclicGroup(3), DihedralGroup(3)))\n\njulia> inverse(GroupElement(1, IntegerGroup()))\nGroupElement{IntegerGroup}(-1, IntegerGroup())\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.is_accend-Tuple{Tuple{Vararg{Int64}}, Int64}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.is_accend","text":"Judge whether a tuple is in an accending order.\n\nInput:\n\na tuple of integers\na modulus\n\nOutput:\n\na boolean value, indicating whether the tuple is in an accending order\n\nIt reports false if the tuple is not in an accending order or the elements are not in the range of 1 to modn.\n\nExample\n\njulia> is_accend((1,2,3,4), 4)\n       true\n\njulia> is_accend((4,1), 4)\n    true\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.is_cyclic-Tuple{Tuple{Vararg{Int64}}, Int64}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.is_cyclic","text":"Judge whether a tuple is cyclic.\n\nInput:\n\na tuple of integers\na modulus\n\nOutput:\n\na boolean value, indicating whether the tuple is cyclic\n\nIt reports false if the tuple is not cyclic or the elements are not in the range of 1 to modn.\n\nExample\n\njulia> is_cyclic((1,2,3,4), 4)\n       true\n\njulia> is_cyclic((4,1), 4)\n         false\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.is_descend-Tuple{Tuple{Vararg{Int64}}, Int64}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.is_descend","text":"Judge whether a tuple is in a descending order.\n\nInput:\n\na tuple of integers\na modulus\n\nOutput:\n\na boolean value, indicating whether the tuple is in a descending order\n\nIt reports false if the tuple is not in a descending order or the elements are not in the range of 1 to modn.\n\nExample\n\njulia> is_descend((4,3,2,1), 4)\n       true\n\njulia> is_descend((4,1), 4) \n         false\n\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.max_abs-Tuple{Main.VecG_TNR.Mor}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.max_abs","text":"Find the maximum absolute value of the element in a morphism.\n\nInput:\n\na morphism\n\nOutput:\n\nthe maximum absolute value of the element in the morphism\n\nExample\n\njulia> G = CyclicGroup(2)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       A = Obj(e=>1, a=>1)\n       B = Obj(e=>1, a=>1)\n         T = Mor(Float64, (A, B))\n         T[e,e] = reshape([1],1,1)\n            T[a,a] = reshape([2],1,1)\n       max_abs(T)\n         2.0\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.multiply-Tuple{Tuple{Vararg{Main.VecG_TNR.GroupElement}}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.multiply","text":"Multiplying a tuple of group elements.\n\nExample\n\njulia> multiply((GroupElement(1, CyclicGroup(4)), GroupElement(2, CyclicGroup(4))))\nGroupElement{CyclicGroup}(3, CyclicGroup(4))\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.random_mor-Tuple{Type, Tuple{Vararg{Main.VecG_TNR.Obj}}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.random_mor","text":"Generating a random morphism for a given objects.\n\nInput:\n\nelement type: data type, for example Float64, ComplexF64, etc...\nobjects: a tuple of objects\n\nOutput:\n\na random morphism, whose data are random numbers\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = random_mor(Float64, (A, B, C, D))\n         The data is too long to show. \n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.to_perm-Tuple{Tuple{Vararg{Int64}}, Int64}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.to_perm","text":"Convert a tuple to a permutation.\n\nInput:\n\na tuple of integers (i,j,k,...)\na modulus n\n\nOutput:\n\na tuple of integers, which is a permutation of the input tuple (i,j,k,..., 1,2,..., i-1)\n\nExample\n\njulia> to_perm((1,2,3), 4)\n       (1, 2, 3, 4)\n\njulia> to_perm((3,4,1), 4)\n       (3, 4, 1, 2)\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.to_sector_outin-Union{Tuple{G}, Tuple{T}, Tuple{Main.VecG_TNR.Mor{G, T}, Int64}} where {T, G<:Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.to_sector_outin","text":"Given a bridge group element gbridge, find all sectors that fuses to gbridge when splited to 1, ..., nlegsplit-1, nlegsplit, | nlegsplit+1, nlegsplit+2, ...\n\nGraphically, we consider the following:\n\n|  |  |  |  |\ng1 g2...    g_n_leg_split\n|  |  |  |  |\n^  ^  ^  ^  ^\n|  |  |  |  |\n \\  \\ | /  /\n      ^\n      |\n      g_bridge\n      |\n /  / | \\  \\\n|  |  |  |  |\ngn gn-1...g_n_leg_split+1  \n|  |  |  |  |\nv  v  v  v  v\n|  |  |  |  |\n\nInput:\n\na morphism\nan integer that describes the number of splitted legs\n\nOutput:\n\na dictionary, whose keys are bridge sectors appeared in the morphism, and values are a 2-argument tuple, each of which is also a tuple, representing the out sectors and in sectors\n\nExample\n\n    D6 = DihedralGroup(3)\n    e = identity_element(D6)\n    s = GroupElement((1,0), D6)\n    r = GroupElement((0,1), D6)\n    A = Obj(e=>2, s=>3, r=>2, s*r=>15) \n    B = Obj(e=>2, s*r*r=>4, r=>3, s*r=>2)\n    C = Obj(e=>2, s=>3, r*r=>2, s*r=>2)\n    D = Obj(e=>2, s=>4, r=>3, s*r*r=>15)\n    TT = random_mor(Float64, (A, B, C, D))\n    to_sector_outin(TT, 2)\n    Dict{Any, Any} with 6 entries:\n    s   => (((s, e), (r, sr)), ((r², sr²), (s, e), (e, s)))\n    e   => (((e, e), (sr, sr)), ((e, e), (r², r), (s, s)))\n    sr  => (((r, sr²), (sr, e), (s, r), (e, sr)), ((sr, e), (s, r), (r², s)))\n    r   => (((r, e), (sr, sr²), (e, r), (s, sr)), ((s, sr²), (r², e), (sr, s)))\n    r²  => (((s, sr²), (r, r)), ((e, r), (sr, sr²)))\n    sr² => (((sr, r), (e, sr²)), ((e, sr²), (sr, r)))\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.verify_group_axioms-Tuple{Main.VecG_TNR.Group}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.verify_group_axioms","text":"Helper to verify group axioms.\n\nInput:\n\ng: group\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.zero_mor-Tuple{Type, Tuple{Vararg{Main.VecG_TNR.Obj}}}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.zero_mor","text":"Generating a zero morphism for a given objects.\n\nInput:\n\nelement type: data type, for example Float64, ComplexF64, etc...\nobjects: a tuple of objects\n\nOutput:\n\na zero morphism, whose data are all zeros\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       A = Obj(e=>1, a=>2, aa=>3)\n       B = Obj(e=>2, a=>3, aa=>2)\n       C = Obj(e=>1, a=>2, aa=>3)\n       D = Obj(e=>2, a=>3, aa=>2)\n       T = zero_mor(Float64, (A, B, C, D))\n         The data is too long to show.\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.zero_obj-Tuple{G} where G<:Main.VecG_TNR.Group","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.zero_obj","text":"Generating a zero object.\n\nInput:\n\na group\n\nOutput:\n\nan object with all zero multiplicities\n\nExample\n\n``` julia> G = CyclicGroup(3)        zero_obj(G)\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.CyclicGroup","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.CyclicGroup","text":"CyclicGroup(n)\n\nConstruct a structure of group ℤn.\n\nExample\n\njulia> CyclicGroup(4)\nCyclicGroup(4)\n\n\n\n\n\n","category":"type"},{"location":"#Main.VecG_TNR.DihedralGroup","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.DihedralGroup","text":"DihedralGroup(n)\n\nConstruct a structure of group D2n.\n\nExample\n\n\njulia> DihedralGroup(4)\nDihedralGroup(4)\n\n\n\n\n\n","category":"type"},{"location":"#Main.VecG_TNR.GroupElement","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.GroupElement","text":"Definition of the structure GroupElement\n\nExample\n\njulia> GroupElement(2, CyclicGroup(4))\nGroupElement{CyclicGroup}(2, CyclicGroup(4))\n\njulia> GroupElement((2,1), DihedralGroup(4))\nGroupElement{DihedralGroup}((2,1), DihedralGroup(4))\n\n\n\n\n\n","category":"type"},{"location":"#Main.VecG_TNR.GroupElement-Tuple{Any, Main.VecG_TNR.CyclicGroup}","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.GroupElement","text":"Construct a group element of group, with value value.\n\nParameter:\n\nvalue: label of group element\ngroup: abstract group structure\n\nExample\n\njulia> GroupElement(2, CyclicGroup(4))\nGroupElement{CyclicGroup}(2, CyclicGroup(4))\n\njulia> GroupElement((2,1), DihedralGroup(4))\nGroupElement{DihedralGroup}((2,1), DihedralGroup(4))\n\njulia> GroupElement((GroupElement(2, CyclicGroup(4), GroupElement((2,1), DihedralGroup(4)))), ProductGroup(CyclicGroup(4), DihedralGroup(4)))\nGroupElement{ProductGroup}((GroupElement{CyclicGroup}(2, CyclicGroup(4)), GroupElement{DihedralGroup}((2,1), DihedralGroup(4))), ProductGroup((CyclicGroup(4), DihedralGroup(4)))\n\njulia> GroupElement(4, IntegerGroup())\nGroupElement{IntegerGroup}(4, IntegerGroup())\n\n\n\n\n\n","category":"method"},{"location":"#Main.VecG_TNR.IntegerGroup","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.IntegerGroup","text":"Constructing integer group ℤ\n\njulia> IntegerGroup()\nIntegerGroup()\n\n\n\n\n\n","category":"type"},{"location":"#Main.VecG_TNR.Mor","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.Mor","text":"The key data type in VecG_TNR.\n\nComponents:\n\nobjects: a tuple of objects\ndata: a dictionary, whose keys are sectors and values are tensors\n\nConstruction function:\n\nMor(element_type, objects)\n\nInput:\n\nelement type: data type, for example Float64, ComplexF64, etc...\nobjects: a tuple of objects\n\nOutput:\n\nan empty tensor, stored by a dictionary, whose key are sectors\n\n\n\n\n\n","category":"type"},{"location":"#Main.VecG_TNR.Obj","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.Obj","text":"Structure of objects in VecG. To be used in Mor.\n\nTo adapt to infinite groups, we use a dictionary to store the multiplicities of group elements. Moreover, some group elements may not appear in the object.\n\nInput:\n\npairs of the form g=>n\n\nOutput:\n\nan object of the form n1g1⊕n2g2⊕n3g3...\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement(0, G)\n       a = GroupElement(1, G)\n       aa = GroupElement(2, G)\n       Obj(e=>1, a=>2, aa=>3)\n\ne⊕2a⊕3a²\n\n\n\n\n\n","category":"type"},{"location":"#Main.VecG_TNR.ProductGroup","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.ProductGroup","text":"ProductGroup(groups...)\n\nConstruct a structure of group G₁ × G₂ × ... × Gₙ.\n\nExample\n\njulia> ProductGroup(CyclicGroup(2), CyclicGroup(3))\nProductGroup((CyclicGroup(2), CyclicGroup(3)))\n\n\n\n\n\n","category":"type"},{"location":"#Main.VecG_TNR.Sector","page":"This is the documentation file of VecG_TNR","title":"Main.VecG_TNR.Sector","text":"Structure of sectors in VecG\n\nInput:\n\na tuple of group elements\n\nOutput:\n\na sector of the form g1⊗g2⊗g3..., such that g1g2g3... = e\n\nIf the sector is not consistent, an error will be thrown.\n\nExample\n\njulia> G = CyclicGroup(3)\n       e = GroupElement((0,0), G)\n       r = GroupElement((0,1), G)\n       s = GroupElement((1,0), G)\n       Sector(s, r, s*r, e)\n\ns⊗r⊗sr⊗e\n\n\n\n\n\n\n","category":"type"}]
}
